name: ci
on: pull_request
jobs:
  go-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run linters
        uses: golangci/golangci-lint-action@v5
        with:
          version: latest
          args: --timeout=3m
  go-test:
    strategy:
      matrix:
        go-version: [1.22.x]
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install Go
        if: success()
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: go tests
        run: (set -o pipefail && go test -v -covermode=count -json ./... | tee test.json)
      - name: annotate go tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.5.1
        with:
          test-results: test.json

  test:
    runs-on: ubuntu-latest
    environment: test
    env:
      BATON_LOG_LEVEL: debug
      BATON_ENVIRONMENT: "test"
      CONNECTOR_ENTITLEMENT: 'team:ari:cloud:identity::team/5b4891db-acf9-45bd-b486-e9c2ad6454c6:REGULAR'
      CONNECTOR_PRINCIPAL: 'ari:cloud:identity::user/712020:1941e385-db75-4843-aab5-a16e168b1a89'
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build baton-atlassian
        run: go build ./cmd/baton-atlassian
      - name: Run baton-atlassian
        run: ./baton-atlassian --user-email=${{ secrets.BATON_USER_EMAIL }} --api-token=${{ secrets.BATON_API_TOKEN }} --organization=${{ secrets.BATON_ORGANIZATION }}
